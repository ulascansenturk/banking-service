// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	context "context"
	accounts "ulascansenturk/service/internal/accounts"

	gorm "gorm.io/gorm"

	mock "github.com/stretchr/testify/mock"

	uuid "github.com/google/uuid"
)

// MockService is an autogenerated mock type for the Service type
type MockService struct {
	mock.Mock
}

// CreateAccount provides a mock function with given fields: ctx, account
func (_m *MockService) CreateAccount(ctx context.Context, account *accounts.Account) (*accounts.Account, error) {
	ret := _m.Called(ctx, account)

	if len(ret) == 0 {
		panic("no return value specified for CreateAccount")
	}

	var r0 *accounts.Account
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *accounts.Account) (*accounts.Account, error)); ok {
		return rf(ctx, account)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *accounts.Account) *accounts.Account); ok {
		r0 = rf(ctx, account)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*accounts.Account)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *accounts.Account) error); ok {
		r1 = rf(ctx, account)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteAccount provides a mock function with given fields: ctx, id
func (_m *MockService) DeleteAccount(ctx context.Context, id uuid.UUID) error {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteAccount")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAccountByID provides a mock function with given fields: ctx, id
func (_m *MockService) GetAccountByID(ctx context.Context, id uuid.UUID) (*accounts.Account, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetAccountByID")
	}

	var r0 *accounts.Account
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) (*accounts.Account, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) *accounts.Account); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*accounts.Account)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAccountsByUserID provides a mock function with given fields: ctx, userID
func (_m *MockService) GetAccountsByUserID(ctx context.Context, userID uuid.UUID) ([]*accounts.Account, error) {
	ret := _m.Called(ctx, userID)

	if len(ret) == 0 {
		panic("no return value specified for GetAccountsByUserID")
	}

	var r0 []*accounts.Account
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) ([]*accounts.Account, error)); ok {
		return rf(ctx, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) []*accounts.Account); ok {
		r0 = rf(ctx, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*accounts.Account)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateAccount provides a mock function with given fields: ctx, account, tx
func (_m *MockService) UpdateAccount(ctx context.Context, account *accounts.Account, tx *gorm.DB) error {
	ret := _m.Called(ctx, account, tx)

	if len(ret) == 0 {
		panic("no return value specified for UpdateAccount")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *accounts.Account, *gorm.DB) error); ok {
		r0 = rf(ctx, account, tx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateBalance provides a mock function with given fields: ctx, accountID, amount, operation
func (_m *MockService) UpdateBalance(ctx context.Context, accountID uuid.UUID, amount int, operation string) error {
	ret := _m.Called(ctx, accountID, amount, operation)

	if len(ret) == 0 {
		panic("no return value specified for UpdateBalance")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, int, string) error); ok {
		r0 = rf(ctx, accountID, amount, operation)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewMockService creates a new instance of MockService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockService {
	mock := &MockService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
