// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	context "context"
	accounts "ulascansenturk/service/internal/accounts"

	gorm "gorm.io/gorm"

	mock "github.com/stretchr/testify/mock"

	uuid "github.com/google/uuid"
)

// MockRepository is an autogenerated mock type for the Repository type
type MockRepository struct {
	mock.Mock
}

// Create provides a mock function with given fields: ctx, account
func (_m *MockRepository) Create(ctx context.Context, account *accounts.Account) (*accounts.Account, error) {
	ret := _m.Called(ctx, account)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 *accounts.Account
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *accounts.Account) (*accounts.Account, error)); ok {
		return rf(ctx, account)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *accounts.Account) *accounts.Account); ok {
		r0 = rf(ctx, account)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*accounts.Account)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *accounts.Account) error); ok {
		r1 = rf(ctx, account)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: ctx, id
func (_m *MockRepository) Delete(ctx context.Context, id uuid.UUID) error {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetByID provides a mock function with given fields: ctx, id
func (_m *MockRepository) GetByID(ctx context.Context, id uuid.UUID) (*accounts.Account, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetByID")
	}

	var r0 *accounts.Account
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) (*accounts.Account, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) *accounts.Account); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*accounts.Account)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByIDForUpdate provides a mock function with given fields: ctx, accountID, tx
func (_m *MockRepository) GetByIDForUpdate(ctx context.Context, accountID uuid.UUID, tx *gorm.DB) (*accounts.Account, error) {
	ret := _m.Called(ctx, accountID, tx)

	if len(ret) == 0 {
		panic("no return value specified for GetByIDForUpdate")
	}

	var r0 *accounts.Account
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, *gorm.DB) (*accounts.Account, error)); ok {
		return rf(ctx, accountID, tx)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, *gorm.DB) *accounts.Account); ok {
		r0 = rf(ctx, accountID, tx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*accounts.Account)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID, *gorm.DB) error); ok {
		r1 = rf(ctx, accountID, tx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByUserID provides a mock function with given fields: ctx, userID
func (_m *MockRepository) GetByUserID(ctx context.Context, userID uuid.UUID) ([]*accounts.Account, error) {
	ret := _m.Called(ctx, userID)

	if len(ret) == 0 {
		panic("no return value specified for GetByUserID")
	}

	var r0 []*accounts.Account
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) ([]*accounts.Account, error)); ok {
		return rf(ctx, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) []*accounts.Account); ok {
		r0 = rf(ctx, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*accounts.Account)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Transaction provides a mock function with given fields: ctx, fn
func (_m *MockRepository) Transaction(ctx context.Context, fn func(*gorm.DB) error) error {
	ret := _m.Called(ctx, fn)

	if len(ret) == 0 {
		panic("no return value specified for Transaction")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, func(*gorm.DB) error) error); ok {
		r0 = rf(ctx, fn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Update provides a mock function with given fields: ctx, account
func (_m *MockRepository) Update(ctx context.Context, account *accounts.Account) error {
	ret := _m.Called(ctx, account)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *accounts.Account) error); ok {
		r0 = rf(ctx, account)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateWithTx provides a mock function with given fields: ctx, account, tx
func (_m *MockRepository) UpdateWithTx(ctx context.Context, account *accounts.Account, tx *gorm.DB) error {
	ret := _m.Called(ctx, account, tx)

	if len(ret) == 0 {
		panic("no return value specified for UpdateWithTx")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *accounts.Account, *gorm.DB) error); ok {
		r0 = rf(ctx, account, tx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewMockRepository creates a new instance of MockRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockRepository {
	mock := &MockRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
