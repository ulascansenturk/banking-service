// Package server provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.16.2 DO NOT EDIT.
package server

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/go-chi/chi/v5"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

// Account defines model for Account.
type Account struct {
	Balance  int32               `json:"balance"`
	Currency string              `json:"currency"`
	Id       *openapi_types.UUID `json:"id,omitempty"`
	Status   string              `json:"status"`
	UserId   openapi_types.UUID  `json:"user_id"`
}

// CreateUserParams defines model for CreateUserParams.
type CreateUserParams struct {
	Balance      *int   `json:"balance,omitempty"`
	CurrencyCode string `json:"currencyCode"`
	Email        string `json:"email"`
	FirstName    string `json:"firstName"`
	LastName     string `json:"lastName"`
	Password     string `json:"password"`
}

// Error defines model for Error.
type Error struct {
	Code   string                 `json:"code"`
	Detail string                 `json:"detail"`
	Meta   map[string]interface{} `json:"meta"`
	Status int                    `json:"status"`
	Title  string                 `json:"title"`
}

// ErrorResponse defines model for ErrorResponse.
type ErrorResponse struct {
	Errors []Error `json:"errors"`
}

// Transaction defines model for Transaction.
type Transaction struct {
	AccountId       *openapi_types.UUID     `json:"account_id,omitempty"`
	Amount          *int                    `json:"amount,omitempty"`
	CreatedAt       *time.Time              `json:"created_at,omitempty"`
	CurrencyCode    *string                 `json:"currency_code,omitempty"`
	Id              *openapi_types.UUID     `json:"id,omitempty"`
	Metadata        *map[string]interface{} `json:"metadata,omitempty"`
	ReferenceId     *openapi_types.UUID     `json:"reference_id,omitempty"`
	Status          *string                 `json:"status,omitempty"`
	TransactionType *string                 `json:"transaction_type,omitempty"`
	UpdatedAt       *time.Time              `json:"updated_at,omitempty"`
	UserId          *openapi_types.UUID     `json:"user_id,omitempty"`
}

// TransferResult defines model for TransferResult.
type TransferResult struct {
	DestinationTransaction *Transaction        `json:"destination_transaction,omitempty"`
	FeeTransaction         *Transaction        `json:"fee_transaction,omitempty"`
	ReferenceId            *openapi_types.UUID `json:"reference_id,omitempty"`
	SourceTransaction      *Transaction        `json:"source_transaction,omitempty"`
}

// TransferWorkflowParams defines model for TransferWorkflowParams.
type TransferWorkflowParams struct {
	Amount               int                     `json:"amount"`
	DestinationAccountID openapi_types.UUID      `json:"destinationAccountID"`
	FeeAmount            *int                    `json:"fee_amount,omitempty"`
	Metadata             *map[string]interface{} `json:"metadata,omitempty"`
	ReferenceId          openapi_types.UUID      `json:"reference_id"`
	SourceAccountID      openapi_types.UUID      `json:"sourceAccountID"`
}

// User defines model for User.
type User struct {
	Email     openapi_types.Email `json:"email"`
	FirstName string              `json:"first_name"`
	Id        *openapi_types.UUID `json:"id,omitempty"`
	LastName  string              `json:"last_name"`
}

// UserResult defines model for UserResult.
type UserResult struct {
	BankAccount *Account `json:"bankAccount,omitempty"`
	User        *User    `json:"user,omitempty"`
}

// CreateUserResponseBody defines model for CreateUserResponseBody.
type CreateUserResponseBody struct {
	Data UserResult `json:"data"`
}

// TransferWorkflowResponseBody defines model for TransferWorkflowResponseBody.
type TransferWorkflowResponseBody struct {
	Data TransferResult `json:"data"`
}

// TransferWorkflowRequestBody defines model for TransferWorkflowRequestBody.
type TransferWorkflowRequestBody struct {
	Data TransferWorkflowParams `json:"data"`
}

// UserCreateRequestBody defines model for UserCreateRequestBody.
type UserCreateRequestBody struct {
	Data CreateUserParams `json:"data"`
}

// V1RunTransferWorkflowJSONBody defines parameters for V1RunTransferWorkflow.
type V1RunTransferWorkflowJSONBody struct {
	Data TransferWorkflowParams `json:"data"`
}

// V1CreateUserJSONBody defines parameters for V1CreateUser.
type V1CreateUserJSONBody struct {
	Data CreateUserParams `json:"data"`
}

// V1RunTransferWorkflowJSONRequestBody defines body for V1RunTransferWorkflow for application/json ContentType.
type V1RunTransferWorkflowJSONRequestBody V1RunTransferWorkflowJSONBody

// V1CreateUserJSONRequestBody defines body for V1CreateUser for application/json ContentType.
type V1CreateUserJSONRequestBody V1CreateUserJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Run transfer workflow
	// (POST /v1/transfers)
	V1RunTransferWorkflow(w http.ResponseWriter, r *http.Request)
	// Create user
	// (POST /v1/users)
	V1CreateUser(w http.ResponseWriter, r *http.Request)
}

// Unimplemented server implementation that returns http.StatusNotImplemented for each endpoint.

type Unimplemented struct{}

// Run transfer workflow
// (POST /v1/transfers)
func (_ Unimplemented) V1RunTransferWorkflow(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Create user
// (POST /v1/users)
func (_ Unimplemented) V1CreateUser(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// V1RunTransferWorkflow operation middleware
func (siw *ServerInterfaceWrapper) V1RunTransferWorkflow(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.V1RunTransferWorkflow(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// V1CreateUser operation middleware
func (siw *ServerInterfaceWrapper) V1CreateUser(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.V1CreateUser(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL          string
	BaseRouter       chi.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/v1/transfers", wrapper.V1RunTransferWorkflow)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/v1/users", wrapper.V1CreateUser)
	})

	return r
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xYS2/jNhD+KwLboxxLtvPSaV85pCjaINttD4vAGFNjm7sSqZJUdo1A/70gKVmyRDtO",
	"tjB66M0mh/P4ZubjUE+EirwQHLlWJHkiEv8uUel3ImVoF/6QwNUS5V9Cfl1m4tv9VmBjtqngGrk2P6Eo",
	"MkZBM8HHX5TgZk3RNeZgfhVSFCh1rTUFbVd/lrgkCflp3HoxdmfUuG/5DiTkilRVaL1kElOSfHaqHkKi",
	"NwWShIjFF6SaVJWR+6RQvpcIGk/ntrNnLL/YYSuoCsGVM9equq+XT+B/ba7M9PGehyRFRSUrjBcksbgH",
	"TSikCj1VdLJ4GtM/GtPNd8iLDDthVWHtmPXlLaWidCHsOrmADDhF8xOdDpLEURSFZClkDpokhHE9nZCQ",
	"5IyzvMxJEm0dYlzjCqUBkZZSIqebHU3k08cP5iR8/xX5Sq9JMrV6Ov9qTUpLxldGEUt3VVxfXeLF+Ww6",
	"wkm8GM3OlxcjuLy6HsWT6ez84vLqGhaUdNwtS5YSj16lQZdqVzdQzR7RJ10qlPO+K/FkisbmCK+uF6N4",
	"kk5HMDu/GM0mFxfxLL6cRVH0vCu9HDeWwm0uOmBu3R4WQUgGzXwou/sz9l6kXYkWA8yBZd6dJZNK/wa5",
	"/1wGBzYLUOqbkKlnsweMM9850bXbsdKLxCDFtM3XACAPiDdSCjlEjtagtMlXKB9RztHKeyomRV3D1Z75",
	"iPKRUQw05oWQIFm2CUoOj8AyWGQYBhK13AQZaPTqzNFRyFbjE6FQKkzni42JLwOlLAaVJzJPwZ9H3t6t",
	"8ep7jjLYE20vU+78FoKt6dDBWMfRSczNrtpeNhr+HWbFumN/MY2u4A+xqzPTYgNSwmZYZ06pr8MsPRuS",
	"cEy/6ww4Tq1Z4ln+gbxhYE8r2kJN56B3VKWgcaRZ7mWopujndF//HumYSU5zV0GaMhMtZHedWLUs0YOO",
	"xCUaF/BYCNqKHGzpFum52/QIlUX6Ypg6RP48Lzf12c37vrJob+3hzY9KMw4umN0SenYYqEUNySL+wOmX",
	"J0eUkr7eYh+9Fp4DAPam52GLbXtmO3zEPgLrAF5POrcfjgraYOwx4mXJE/aJTcVLIulR2o7FLfUMFe9B",
	"7mGYy16mPFGaa9bD2PngUvwi1vwsFfimXjqjIu9OTc2975865ryeLFqFv4g1J0dMkv/O+OYmD48bHwQ+",
	"m5gmtk4oXX0Pe3DdRzQL4F87o/2hZm3Eako85qG109QdN7zvEcaXonksAdWd3JMyA0WBK+S6lF/jNyuz",
	"brM+eMeoemD6vUD+9u42UAVStqxfXKaAyzwHuelIvr27Ja2X9SoJySNK5XTGZ9FZZEyJAjkUjCRkehaf",
	"RXa01GsL5PgxHuu61B0PCWVjMGhb47cpScif8X3J+y1Bws6Hic0+YHe+XYwPfbjoP7QnUbxfaS03PviG",
	"rUIyi6IXPWWfHavu25fmIIvvIA3qiKztyeR0tj/xQgqKSpkBO7jhmmkLwPkpAbjlGiWHLKjH6HoQrboF",
	"fF/yoCm54FtTS0bGFKPp0YOF2L5tXlN//m9Pr6q8Pd+B/q+5/2DNuVwFpSN3s2VlFUk+P/XUZYKCualK",
	"aSh8rXWRjMd2cS2UTqbmrqzMfQUrd9xdiKRl0SrcLopSrwTjq1FnulSkeqj+CQAA//8/EhrI4hUAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
